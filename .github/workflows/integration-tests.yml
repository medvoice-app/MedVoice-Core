name: Integration Tests

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

# Cancel in-progress jobs when new commits are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  integration-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.8.2
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Install dependencies with Poetry
      run: |
        poetry install --no-interaction
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    
    - name: Create .env file
      run: |
        echo "Creating .env file from template..."
        cp .env.example .env
        # Add any required environment variables for CI
        echo "CI=true" >> .env
    
    - name: Start application and run tests
      run: |
        # Export Docker cache location for docker-compose to use
        export DOCKER_BUILDKIT=1
        export COMPOSE_DOCKER_CLI_BUILD=1
        export DOCKER_BUILDKIT_CACHE=/tmp/.buildx-cache
        
        # Start the application
        make up
        
        # Wait for services to be ready by checking container status
        echo "Waiting for containers to be ready..."
        attempt=1
        max_attempts=20
        
        while [ $attempt -le $max_attempts ]
        do
          if docker ps | grep -q "app" && docker ps | grep -q "postgres"; then
            echo "All required containers are running"
            break
          fi
          echo "Attempt $attempt of $max_attempts: Not all containers are running yet, waiting..."
          sleep 5
          ((attempt++))
        done
        
        if [ $attempt -gt $max_attempts ]; then
          echo "Containers did not start properly within the timeout period"
          exit 1
        fi
        
        # Run tests inside the Docker container
        docker exec $(docker ps -q --filter name=app) python -m pytest tests/integration/test_nurse_api.py tests/integration/test_db.py -v
        
    - name: Stop application
      if: always()
      run: |
        make down
